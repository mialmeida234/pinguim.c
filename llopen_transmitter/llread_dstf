#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <fcntl.h>
#include <termios.h>
#include "llread.h"

#define MAX_SIZE 255
#define BAUDRATE B38400
#define FLAG 0x7E
#define ESCAPE 0x7D
#define ESCAPE_FLAG 0x5E
#define ESCAPE_ESCAPE 0x5D
#define A 0x05C
#define CONTROL_FIELD 0x01

#define BUFFER_SIZE 1024

int llread(int fd, char *buffer) {
    ssize_t bytesRead = 0;
    ssize_t bytesReadCurrent = 0;
    int startIndex = -1;
    int endIndex = -1;
    int flagCount = 0;
    int sequenceNumber = -1;

    while (bytesRead < BUFFER_SIZE) {
        bytesReadCurrent = read(fd, buffer + bytesRead, 1);

        if (bytesReadCurrent == -1) {
            // Error occurred while reading
            return -1;
        } else if (bytesReadCurrent == 0) {
            // Reached end of input
            break;
        } else {
            bytesRead += bytesReadCurrent;

            if (buffer[bytesRead - 1] == 0x5C) {
                flagCount++;

                if (flagCount == 1 && startIndex == -1) {
                    // First flag encountered, mark its index
                    startIndex = bytesRead - 1;
                } else if (flagCount == 2 && startIndex != -1) {
                    // Second flag encountered, mark its index and stop reading
                    endIndex = bytesRead - 1;
                    break;
                }
            }
        }
    }

    printf("[READ] Frame contents: ");
    for (int i = 0; i < bytesRead; i++) {
        printf("%02X ", (unsigned char)buffer[i]);
    }
    printf("\n");

    if (startIndex != -1 && endIndex != -1 && startIndex < endIndex) {
        int isolatedLength = endIndex - startIndex + 1;
        unsigned char *isolatedContents = (unsigned char *)malloc(isolatedLength * sizeof(unsigned char));

        if (isolatedContents != NULL) {
            for (int i = 0; i < isolatedLength; i++) {
                isolatedContents[i] = (unsigned char)buffer[startIndex + i];
            }

            // Destuffing
            int destuffedLength = 0;
            unsigned char *destuffedContents = (unsigned char *)malloc(isolatedLength * sizeof(unsigned char));

            for (int i = 0; i < isolatedLength; i++) {
                if (i < isolatedLength - 1 && isolatedContents[i] == 0x5D && isolatedContents[i + 1] == 0x7D) {
                    // De-escape sequence 0x5D 0x7D -> 0x5D
                    destuffedContents[destuffedLength++] = 0x5D;
                    i++; // Skip the next byte
                } else if (i < isolatedLength - 1 && isolatedContents[i] == 0x5D && isolatedContents[i + 1] == 0x7C) {
                    // De-escape sequence 0x5D 0x7C -> 0x5C
                    destuffedContents[destuffedLength++] = 0x5C;
                    i++; // Skip the next byte
                } else {
                    destuffedContents[destuffedLength++] = isolatedContents[i];
                }
            }

            printf("[READ] Destuffed contents: ");
            for (int i = 0; i < destuffedLength; i++) {
                printf("%02X ", destuffedContents[i]);
            }
            printf("\n");

            // Check if destuffedContents has the correct format
            if (destuffedLength >= 4 &&
                destuffedContents[0] == 0x5C &&
                destuffedContents[1] == 0x01 &&
                (destuffedContents[2] == 0x00 || destuffedContents[2] == 0x02) &&
                destuffedContents[3] == (0x01 ^ destuffedContents[2])) {
                // Extract the value of S from destuffedContents
                if (destuffedContents[2] == 0x00)
                    sequenceNumber = 0;
                else if (destuffedContents[2] == 0x02)
                    sequenceNumber = 1;
                else {
                    printf("[READ] Error: Invalid value of S.\n");
                    free(isolatedContents);
                    free(destuffedContents);
                    return -1;
                }

                // Determine the value of R
                int oppositeSequenceNumber = sequenceNumber ^ 1;

                printf("[READ] Destuffed contents: ");
                for (int i = 0; i < destuffedLength; i++) {
                    printf("%02X ", destuffedContents[i]);
                }
                printf("\n");

                printf("[READ] Value of S: %d\n", sequenceNumber);
                printf("[READ] Value of R: %d\n", oppositeSequenceNumber);

                // Generate the control message according to the value of R
                unsigned char rrMessage[5];
                rrMessage[0] = 0x5C;
                rrMessage[1] = 0x03;

                if (sequenceNumber == 0)
                    rrMessage[2] = 0x00;
                else if (sequenceNumber == 1)
                    rrMessage[2] = 0x02;

                rrMessage[3] = rrMessage[1] ^ rrMessage[2]; // XOR operation -> BCC1
                printf("[xor] %02X ", rrMessage[3]);
                printf("\n");
                rrMessage[4] = 0x5C;

                // Write the control message
                write(fd, rrMessage, sizeof(rrMessage));
                printf("[READ] RR message sent.\n");
            } else {
                printf("[READ] Incorrect format of isolated contents.\n");
                free(isolatedContents);
                free(destuffedContents);
                return -1;
            }

            free(isolatedContents);
            free(destuffedContents);
        } else {
            printf("[READ] Memory allocation failed.\n");
        }
    } else {
        // Only one occurrence, an error occurred
        printf("[READ] Only one flag occurrence.\n");
        unsigned char rejMessage[5];
        rejMessage[0] = 0x5C;
        rejMessage[1] = 0x03;

        if (sequenceNumber == 0)
            rejMessage[2] = 0x25;
        else if (sequenceNumber == 1)
            rejMessage[2] = 0x05;

        rejMessage[3] = rejMessage[1] ^ rejMessage[2];
        rejMessage[4] = 0x5C;

        // Write the control message
        write(fd, rejMessage, sizeof(rejMessage));
        return -1;
    }

    return (int)bytesRead;
}
